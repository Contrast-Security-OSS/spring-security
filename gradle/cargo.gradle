buildscript {
    repositories {
        jcenter()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-cargo-plugin:1.5.2'
    }
}

apply plugin: org.gradle.api.plugins.cargo.CargoPlugin

cargo {
    containerId = 'tomcat7x'

    local {
        homeDir = file(project.tomcat_home)
        jvmArgs = '-javaagent:' + project.contrast_agent + '=' + project.contrast_config
    }
}

task integrationTomcatRun(type: org.gradle.api.plugins.cargo.tasks.local.CargoStartLocal) {
    onlyIf { !sourceSets.integrationTest.allSource.empty }

    if (new File(project.contrast_config).exists()) {
        println("Configuring Contrast API")
        def contrast_config = new XmlSlurper().parse(new File(project.contrast_config))
        def contrast_username = contrast_config.user.id
        def contrast_servicekey = contrast_config.user.key
        def contrast_apikey = contrast_config."global-key"
        println("Configured for " + contrast_username + " / " + contrast_servicekey + " / " + contrast_apikey)
    }

    contextPath = cargoStartLocal.deployables[0].context
}

task integrationTomcatStop(type: org.gradle.api.plugins.cargo.tasks.local.CargoStopLocal) {
    onlyIf { !sourceSets.integrationTest.allSource.empty }
    doFirst {
    }
}

integrationTest {
    dependsOn integrationTomcatRun
    doFirst {
        // TODO: The port should be dynamic, like in the Tomcat Integration Tests
        def host = 'localhost:8080'
        // TODO: Need to retrieve the context path from Cargo, somehow - not quite sure how to get at this
        systemProperties['geb.build.baseUrl'] = 'http://'+host+'/sample-4.0.0.CI-SNAPSHOT/'
        systemProperties['geb.build.reportsDir'] = 'build/geb-reports'

        // If there is a contrast.config but no agent, download the agent from the API
        if (new File(project.contrast_config).exists()) {
            if (!new File(project.contrast_agent).exists()) {
                dependsOn downloadContrastAgent
            }
        }
    }
    finalizedBy integrationTomcatStop
}